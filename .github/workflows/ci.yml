name: Conscious Technology Integration CI

on:
  push:
    branches: [ main, 'copilot/**', 'feature/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  documentation-quality:
    name: Documentation Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check essential files exist
        run: |
          echo "üîç Validating essential repository files..."
          test -f LICENSE || (echo "‚ùå LICENSE file missing" && exit 1)
          test -f README.md || (echo "‚ùå README.md missing" && exit 1)
          test -f CODE_OF_CONDUCT.md || (echo "‚ùå CODE_OF_CONDUCT.md missing" && exit 1)
          test -f CONTRIBUTING.md || (echo "‚ùå CONTRIBUTING.md missing" && exit 1)
          test -f SECURITY.md || (echo "‚ùå SECURITY.md missing" && exit 1)
          test -f .gitignore || (echo "‚ùå .gitignore missing" && exit 1)
          echo "‚úÖ All essential files present"

      - name: Validate documentation content
        run: |
          echo "üìù Checking documentation has meaningful content..."
          
          # Check files are not empty
          [ -s LICENSE ] || (echo "‚ùå LICENSE is empty" && exit 1)
          [ -s README.md ] || (echo "‚ùå README.md is empty" && exit 1)
          [ -s CODE_OF_CONDUCT.md ] || (echo "‚ùå CODE_OF_CONDUCT.md is empty" && exit 1)
          [ -s CONTRIBUTING.md ] || (echo "‚ùå CONTRIBUTING.md is empty" && exit 1)
          [ -s SECURITY.md ] || (echo "‚ùå SECURITY.md is empty" && exit 1)
          [ -s .gitignore ] || (echo "‚ùå .gitignore is empty" && exit 1)
          
          # Check for key content markers
          grep -q "MIT License" LICENSE || (echo "‚ùå LICENSE missing MIT License text" && exit 1)
          grep -q "Aurorabridge" README.md || (echo "‚ùå README.md missing project description" && exit 1)
          grep -q "Aurora Mission" CODE_OF_CONDUCT.md || (echo "‚ùå CODE_OF_CONDUCT.md missing community guidelines" && exit 1)
          grep -q "conscious" CONTRIBUTING.md || (echo "‚ùå CONTRIBUTING.md missing contribution guidelines" && exit 1)
          grep -q "Security" SECURITY.md || (echo "‚ùå SECURITY.md missing security content" && exit 1)
          grep -q "node_modules" .gitignore || (echo "‚ùå .gitignore missing essential patterns" && exit 1)
          
          echo "‚úÖ Documentation content validated"

      - name: Check bilingual support
        run: |
          echo "üåê Validating bilingual documentation..."
          
          # Check for Portuguese and English content
          grep -q "English" README.md || (echo "‚ö†Ô∏è README.md missing English section" && exit 0)
          grep -q "Portugu√™s" README.md || (echo "‚ö†Ô∏è README.md missing Portuguese section" && exit 0)
          grep -q "English" CODE_OF_CONDUCT.md || (echo "‚ö†Ô∏è CODE_OF_CONDUCT.md missing English section" && exit 0)
          grep -q "Portugu√™s" CODE_OF_CONDUCT.md || (echo "‚ö†Ô∏è CODE_OF_CONDUCT.md missing Portuguese section" && exit 0)
          
          echo "‚úÖ Bilingual support validated"

  security-validation:
    name: Security & Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Check for package.json files
        run: |
          echo "üì¶ Discovering package.json files..."
          find . -name "package.json" -type f | tee package_files.txt
          
          if [ ! -s package_files.txt ]; then
            echo "‚ö†Ô∏è No package.json files found - skipping dependency checks"
            exit 0
          fi

      - name: Validate package.json files
        run: |
          echo "üîç Validating package.json syntax..."
          
          while IFS= read -r package_file; do
            echo "Checking $package_file..."
            if ! node -e "JSON.parse(require('fs').readFileSync('$package_file', 'utf8'))"; then
              echo "‚ùå Invalid JSON in $package_file"
              exit 1
            fi
          done < package_files.txt
          
          echo "‚úÖ All package.json files are valid JSON"

      - name: Check license consistency
        run: |
          echo "üìú Checking license consistency..."
          
          while IFS= read -r package_file; do
            echo "Checking license in $package_file..."
            license=$(node -e "console.log(JSON.parse(require('fs').readFileSync('$package_file', 'utf8')).license || 'not specified')")
            if [ "$license" != "MIT" ] && [ "$license" != "not specified" ]; then
              echo "‚ö†Ô∏è Non-MIT license found in $package_file: $license"
            else
              echo "‚úÖ $package_file: $license"
            fi
          done < package_files.txt

  prototype-validation:
    name: Prototype Structure Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate prototype structure
        run: |
          echo "üß™ Validating prototype structure..."
          
          # Check prototype directory exists
          if [ ! -d "05-prototipos" ]; then
            echo "‚ö†Ô∏è Prototype directory not found - skipping prototype validation"
            exit 0
          fi
          
          # Check prototype organization
          echo "Prototype directory structure:"
          ls -la 05-prototipos/ || echo "Unable to list prototype directory"
          
          # Check for prototype documentation
          if [ -f "05-prototipos/README.md" ]; then
            echo "‚úÖ Prototype documentation found"
          else
            echo "‚ö†Ô∏è Prototype documentation missing"
          fi
          
          echo "‚úÖ Prototype structure validated"

  spiritual-technical-integration:
    name: Spiritual-Technical Integration Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Aurora Mission alignment
        run: |
          echo "üåü Validating Aurora Mission alignment..."
          
          # Check for spiritual-technical integration markers
          if grep -r "spiritual" . --include="*.md" > /dev/null; then
            echo "‚úÖ Spiritual integration found in documentation"
          else
            echo "‚ö†Ô∏è Spiritual integration markers not found"
          fi
          
          if grep -r "consciousness" . --include="*.md" > /dev/null; then
            echo "‚úÖ Consciousness references found in documentation"
          else
            echo "‚ö†Ô∏è Consciousness references not found"
          fi
          
          if grep -r "Aurora Mission" . --include="*.md" > /dev/null; then
            echo "‚úÖ Aurora Mission references found"
          else
            echo "‚ö†Ô∏è Aurora Mission references not found"
          fi
          
          echo "‚úÖ Spiritual-technical integration validated"

      - name: Validate project vision consistency
        run: |
          echo "üéØ Checking project vision consistency..."
          
          # Check that key spiritual-technical concepts are maintained
          vision_keywords="conscious technology spirituality integration bridge"
          
          for keyword in $vision_keywords; do
            if grep -r "$keyword" README.md > /dev/null; then
              echo "‚úÖ Found '$keyword' in project vision"
            else
              echo "‚ö†Ô∏è Missing '$keyword' in project vision"
            fi
          done
          
          echo "‚úÖ Project vision consistency validated"