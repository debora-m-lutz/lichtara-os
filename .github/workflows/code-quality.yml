name: Code Quality Check

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check file encoding
      run: |
        echo "üîç Checking file encoding..."
        
        # Check for files with non-UTF-8 encoding
        find . -type f -name "*.md" -o -name "*.txt" -o -name "*.json" -o -name "*.yml" -o -name "*.yaml" | while read file; do
          if ! file "$file" | grep -q "UTF-8"; then
            echo "‚ö†Ô∏è  File $file might not be UTF-8 encoded"
          fi
        done
        
        echo "‚úÖ File encoding check completed"
    
    - name: Check line endings
      run: |
        echo "üîç Checking line endings..."
        
        # Check for mixed line endings
        find . -type f \( -name "*.md" -o -name "*.txt" -o -name "*.json" -o -name "*.yml" -o -name "*.yaml" \) -not -path "./.git/*" | while read file; do
          if file "$file" | grep -q "CRLF"; then
            echo "‚ö†Ô∏è  File $file has Windows line endings (CRLF)"
          fi
        done
        
        echo "‚úÖ Line endings check completed"
    
    - name: Validate JSON files
      run: |
        echo "üîç Validating JSON files..."
        
        find . -name "*.json" -not -path "./.git/*" | while read file; do
          if python3 -m json.tool "$file" > /dev/null 2>&1; then
            echo "‚úÖ $file is valid JSON"
          else
            echo "‚ùå $file contains invalid JSON"
            exit 1
          fi
        done
    
    - name: Validate YAML files
      run: |
        echo "üîç Validating YAML files..."
        
        # Install PyYAML for validation
        pip3 install PyYAML
        
        find . \( -name "*.yml" -o -name "*.yaml" \) -not -path "./.git/*" | while read file; do
          if python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
            echo "‚úÖ $file is valid YAML"
          else
            echo "‚ùå $file contains invalid YAML"
            exit 1
          fi
        done
    
    - name: Check for TODO comments
      run: |
        echo "üîç Checking for TODO comments..."
        
        # Look for TODO, FIXME, HACK comments
        todo_count=$(grep -r -i -n "TODO\|FIXME\|HACK" . --exclude-dir=.git --include="*.md" --include="*.txt" | wc -l)
        
        if [ "$todo_count" -gt 0 ]; then
          echo "üìù Found $todo_count TODO/FIXME/HACK comments:"
          grep -r -i -n "TODO\|FIXME\|HACK" . --exclude-dir=.git --include="*.md" --include="*.txt" | head -10
          echo "‚úÖ TODOs documented (this is informational, not a failure)"
        else
          echo "‚úÖ No TODO comments found"
        fi
    
    - name: Check repository structure
      run: |
        echo "üîç Validating repository structure..."
        
        # Check if repository follows the documented structure
        expected_dirs=("00-overview:" "01-fundamentos:" "02-manual-aurora:" "03-tecnica:" "04-legal:" "05-ai:" "05-prototipos" "manuais")
        
        for dir in "${expected_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "‚úÖ Directory $dir exists"
          else
            echo "‚ö†Ô∏è  Expected directory $dir not found"
          fi
        done
        
        echo "‚úÖ Repository structure check completed"