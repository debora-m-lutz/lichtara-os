---
name: Branch Protection Enforcement
# Prote√ß√£o de Ramifica√ß√£o - Branch Protection

"on":
  pull_request:
    branches: [main, master, develop]
  push:
    branches: [main, master, develop]
  workflow_dispatch:

jobs:
  # Verifica√ß√£o de hist√≥rico linear - Linear history check
  linear-history-check:
    name: Linear History Verification
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for merge commits
        run: |
          echo "üîç Verificando hist√≥rico linear / Checking linear history..."

          # Check if there are any merge commits in the PR
          MERGE_COMMITS=$(git log --oneline --merges \
            origin/${{ github.base_ref }}..${{ github.head_ref }} | wc -l)

          if [ "$MERGE_COMMITS" -gt 0 ]; then
            echo "‚ùå Merge commits encontrados."
            echo "Use rebase para manter hist√≥rico linear."
            echo "‚ùå Merge commits found."
            echo "Please use rebase to maintain linear history."
            exit 1
          else
            echo "‚úÖ Hist√≥rico linear confirmado / Linear history confirmed"
          fi

  # Verifica√ß√£o de qualidade do c√≥digo - Code quality check
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check documentation structure
        run: |
          echo "üìö Verificando estrutura da documenta√ß√£o"
          echo "Checking documentation structure..."

          # Verify that README files exist in main directories
          MISSING_READMES=""
          dirs="00-overview: 01-fundamentos: 02-manual-aurora:"
          dirs="$dirs 03-tecnica: 04-legal: 05-ai:"
          for dir in $dirs; do
            if [ ! -f "$dir/README.md" ]; then
              MISSING_READMES="$MISSING_READMES $dir"
            fi
          done

          if [ -n "$MISSING_READMES" ]; then
            echo "‚ùå README.md ausente em: $MISSING_READMES"
            echo "‚ùå Missing README.md in: $MISSING_READMES"
            exit 1
          fi

          echo "‚úÖ Estrutura da documenta√ß√£o v√°lida"
          echo "Documentation structure valid"

      - name: Check for sensitive information
        run: |
          echo "üîí Verificando informa√ß√µes sens√≠veis"
          echo "Checking for sensitive information..."

          # Check for common sensitive patterns
          if grep -r -i "password\|secret\|token\|key" \
              --exclude-dir=.git .; then
            echo "‚ö†Ô∏è Poss√≠vel informa√ß√£o sens√≠vel detectada"
            echo "Potential sensitive information detected"
            echo "Please review the above findings and ensure no secrets"
          else
            echo "‚úÖ Nenhuma informa√ß√£o sens√≠vel detectada"
            echo "No sensitive information detected"
          fi

  # Verifica√ß√£o de conven√ß√µes de commit - Commit convention check
  commit-convention:
    name: Commit Convention Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit messages
        run: |
          echo "üìù Verificando conven√ß√µes de commit"
          echo "Checking commit conventions..."

          # Get commits in PR
          COMMITS=$(git log --pretty=format:"%s" \
            origin/${{ github.base_ref }}..${{ github.head_ref }})

          echo "Commits no PR / Commits in PR:"
          echo "$COMMITS"

          # Basic validation - commits should be meaningful
          echo "$COMMITS" | while read -r commit; do
            if [ ${#commit} -lt 10 ]; then
              echo "‚ö†Ô∏è Commit muito curto: '$commit'"
              echo "‚ö†Ô∏è Commit too short: '$commit'"
            fi
          done

          echo "‚úÖ Verifica√ß√£o de commits conclu√≠da"
          echo "Commit check completed"

  # Status final - Final status
  protection-status:
    name: Branch Protection Status
    runs-on: ubuntu-latest
    needs: [linear-history-check, code-quality, commit-convention]
    if: always()
    steps:
      - name: Check protection status
        run: |
          echo "üõ°Ô∏è Status da Prote√ß√£o de Ramifica√ß√£o"
          echo "Branch Protection Status"
          echo "================================================="

          if [ "${{ needs.linear-history-check.result }}" == "success" ] || \
             [ "${{ needs.linear-history-check.result }}" == "skipped" ]; then
            echo "‚úÖ Hist√≥rico Linear: APROVADO / Linear History: PASSED"
          else
            echo "‚ùå Hist√≥rico Linear: FALHOU / Linear History: FAILED"
          fi

          if [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "‚úÖ Qualidade do C√≥digo: APROVADO / Code Quality: PASSED"
          else
            echo "‚ùå Qualidade do C√≥digo: FALHOU / Code Quality: FAILED"
          fi

          if [ "${{ needs.commit-convention.result }}" == "success" ] || \
             [ "${{ needs.commit-convention.result }}" == "skipped" ]; then
            echo "‚úÖ Conven√ß√µes de Commit: APROVADO"
            echo "Commit Conventions: PASSED"
          else
            echo "‚ùå Conven√ß√µes de Commit: FALHOU"
            echo "Commit Conventions: FAILED"
          fi

          echo "================================================="

          # Fail if any required check failed
          if [ "${{ needs.code-quality.result }}" != "success" ]; then
            echo "üö´ Prote√ß√£o de ramifica√ß√£o ativada - corre√ß√µes necess√°rias"
            echo "üö´ Branch protection activated - fixes required"
            exit 1
          fi

          echo "üéâ Todas as verifica√ß√µes passaram! / All checks passed!"
